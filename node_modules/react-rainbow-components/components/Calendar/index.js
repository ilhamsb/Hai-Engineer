"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Calendar;
exports.Component = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Select = _interopRequireDefault(require("./../Select"));

var _ButtonIcon = _interopRequireDefault(require("./../ButtonIcon"));

var _rightArrow = _interopRequireDefault(require("./icons/rightArrow"));

var _leftArrow = _interopRequireDefault(require("./icons/leftArrow"));

var _daysOfWeek = _interopRequireDefault(require("./daysOfWeek"));

var _month = _interopRequireDefault(require("./month"));

var _helpers = require("./helpers");

var _controlsContainer = _interopRequireDefault(require("./styled/controlsContainer"));

var _monthContainer = _interopRequireDefault(require("./styled/monthContainer"));

var _month2 = _interopRequireDefault(require("./styled/month"));

var _utils = require("../../libs/utils");

var _context = require("../Application/context");

/* eslint-disable react/prop-types */

/**
 * Calendar provide a simple way to select a single date.
 */
var CalendarComponent =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(CalendarComponent, _Component);

  function CalendarComponent(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, CalendarComponent);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(CalendarComponent).call(this, props));
    _this.state = {
      currentMonth: (0, _helpers.getFirstDayMonth)((0, _helpers.normalizeDate)(props.value))
    };
    _this.monthLabelId = (0, _utils.uniqueId)('month');
    _this.previousMonth = _this.previousMonth.bind((0, _assertThisInitialized2["default"])(_this));
    _this.nextMonth = _this.nextMonth.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleYearChange = _this.handleYearChange.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(CalendarComponent, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var prevValue = prevProps.value;
      var value = this.props.value;
      var normalizedDate = (0, _helpers.normalizeDate)(value);

      if ((0, _helpers.formatDate)((0, _helpers.normalizeDate)(prevValue)) !== (0, _helpers.formatDate)(normalizedDate)) {
        this.updateCurrentMonth(normalizedDate);
      }
    }
  }, {
    key: "updateCurrentMonth",
    value: function updateCurrentMonth(value) {
      this.setState({
        currentMonth: (0, _helpers.getFirstDayMonth)(value)
      });
    }
  }, {
    key: "nextMonth",
    value: function nextMonth() {
      this.setState({
        currentMonth: (0, _helpers.addMonths)(this.state.currentMonth, 1)
      });
    }
  }, {
    key: "previousMonth",
    value: function previousMonth() {
      this.setState({
        currentMonth: (0, _helpers.addMonths)(this.state.currentMonth, -1)
      });
    }
  }, {
    key: "handleYearChange",
    value: function handleYearChange(event) {
      var year = +event.target.value;
      var newMonth = new Date(this.state.currentMonth);
      newMonth.setFullYear(year);
      this.setState({
        currentMonth: newMonth
      });
    }
  }, {
    key: "render",
    value: function render() {
      var currentMonth = this.state.currentMonth;
      var _this$props = this.props,
          id = _this$props.id,
          onChange = _this$props.onChange,
          value = _this$props.value,
          minDate = _this$props.minDate,
          maxDate = _this$props.maxDate,
          className = _this$props.className,
          style = _this$props.style,
          locale = _this$props.locale;
      var formattedMonth = (0, _helpers.getFormattedMonth)(currentMonth, locale);
      var currentYear = currentMonth.getFullYear();
      var yearsRange = (0, _helpers.getYearsRange)({
        minDate: minDate,
        maxDate: maxDate,
        currentMonth: currentMonth.getMonth()
      });
      var lastYearItem = yearsRange[yearsRange.length - 1];
      var maxSelectableDate = maxDate || new Date(lastYearItem.value + 1, 0, 1);
      var disableNextMonth = (0, _helpers.addMonths)(currentMonth, 1) > maxSelectableDate;
      var minSelectableDate = minDate || new Date(yearsRange[0].value, 0, 1);
      var prevDate = (0, _helpers.getLastDayMonth)((0, _helpers.addMonths)(currentMonth, -1));
      var disablePreviousMonth = prevDate < minSelectableDate;
      return _react["default"].createElement("section", {
        id: id,
        className: className,
        style: style
      }, _react["default"].createElement(_controlsContainer["default"], null, _react["default"].createElement(_monthContainer["default"], null, _react["default"].createElement(_ButtonIcon["default"], {
        onClick: this.previousMonth,
        size: "medium",
        disabled: disablePreviousMonth,
        icon: _react["default"].createElement(_leftArrow["default"], null),
        assistiveText: "Previous Month"
      }), _react["default"].createElement(_month2["default"], {
        id: this.monthLabelId,
        "data-id": "month"
      }, formattedMonth), _react["default"].createElement(_ButtonIcon["default"], {
        onClick: this.nextMonth,
        size: "medium",
        disabled: disableNextMonth,
        icon: _react["default"].createElement(_rightArrow["default"], null),
        assistiveText: "Next Month"
      })), _react["default"].createElement(_Select["default"], {
        label: "select year",
        hideLabel: true,
        value: currentYear,
        options: yearsRange,
        onChange: this.handleYearChange
      })), _react["default"].createElement("table", {
        role: "grid",
        "aria-labelledby": this.monthLabelId
      }, _react["default"].createElement(_daysOfWeek["default"], {
        locale: locale
      }), _react["default"].createElement(_month["default"], {
        value: value,
        firstDayMonth: currentMonth,
        minDate: minDate,
        maxDate: maxDate,
        onChange: onChange
      })));
    }
  }]);
  return CalendarComponent;
}(_react.Component);

exports.Component = CalendarComponent;

function Calendar(_ref) {
  var locale = _ref.locale,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["locale"]);
  return _react["default"].createElement(_context.Consumer, null, function (values) {
    return _react["default"].createElement(CalendarComponent, (0, _extends2["default"])({
      locale: (0, _utils.getLocale)(values, locale)
    }, rest));
  });
}

Calendar.propTypes = {
  /** Sets the date for the Calendar programmatically. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(Date), _propTypes["default"].string]),

  /** The ending of a range of valid dates. The range includes the endDate.
   * The default value is current date + 100 years. */
  maxDate: _propTypes["default"].instanceOf(Date),

  /** The beginning of a range of valid dates. The range includes the startDate.
   * The default value is current date - 100 years. */
  minDate: _propTypes["default"].instanceOf(Date),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** The Calendar locale. Defaults to browser's language. */
  locale: _propTypes["default"].string
};
Calendar.defaultProps = {
  value: undefined,
  minDate: undefined,
  maxDate: undefined,
  onChange: function onChange() {},
  className: undefined,
  style: undefined,
  id: undefined,
  locale: undefined
};