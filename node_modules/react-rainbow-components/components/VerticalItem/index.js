"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = VerticalItem;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _context = require("../VerticalNavigation/context");

var _context2 = require("../VerticalSection/context");

var _context3 = require("../VerticalSectionOverflow/context");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

require("./styles.css");

/* eslint-disable no-script-url, react/prop-types */
function Item(props) {
  var label = props.label,
      icon = props.icon,
      name = props.name,
      href = props.href,
      onClick = props.onClick,
      notification = props.notification,
      className = props.className,
      style = props.style,
      selectedItem = props.selectedItem,
      onSelect = props.onSelect,
      entityHeaderId = props.entityHeaderId,
      isExpanded = props.isExpanded;
  var isSelected = name === selectedItem;

  var getContainerClassNames = function getContainerClassNames() {
    return (0, _classnames["default"])('rainbow-vertical-item', {
      'rainbow-vertical-item--active': isSelected
    }, className);
  };

  var getAriaCurrent = function getAriaCurrent() {
    if (isSelected) {
      return 'page';
    }

    return undefined;
  };

  function hanldeOnClick(e) {
    onClick(e);
    onSelect(e, name);
  }

  function resolveTabIndex() {
    if (isExpanded === false) {
      return -1;
    }

    return 0;
  }

  return _react["default"].createElement("li", {
    className: getContainerClassNames(),
    style: style
  }, _react["default"].createElement("a", {
    href: href,
    onClick: hanldeOnClick,
    "aria-describedby": entityHeaderId,
    className: "rainbow-vertical-item_action",
    "aria-current": getAriaCurrent(),
    tabIndex: resolveTabIndex()
  }, _react["default"].createElement("span", {
    className: "rainbow-vertical-item_action-label"
  }, label), _react["default"].createElement(_RenderIf["default"], {
    isTrue: !!notification
  }, _react["default"].createElement("span", {
    className: "rainbow-vertical-item_notification"
  }, notification))), _react["default"].createElement(_RenderIf["default"], {
    isTrue: !!icon
  }, _react["default"].createElement("span", {
    className: "rainbow-vertical-item_icon"
  }, icon)));
}
/**
 * A text-only link within VerticalNavigationSection or VerticalNavigationOverflow.
 * @category Layout
 */


function VerticalItem(props) {
  return _react["default"].createElement(_context.Consumer, null, function (context) {
    return _react["default"].createElement(_context2.Consumer, null, function (entityHeaderId) {
      return _react["default"].createElement(_context3.Consumer, null, function (isExpanded) {
        return _react["default"].createElement(Item, (0, _extends2["default"])({}, props, context, {
          entityHeaderId: entityHeaderId,
          isExpanded: isExpanded
        }));
      });
    });
  });
}

VerticalItem.propTypes = {
  /** The text displayed for the navigation item. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** A unique identifier for the navigation item. */
  name: _propTypes["default"].string,

  /** The icon to show if it is passed. It must be a svg icon or a font icon. */
  icon: _propTypes["default"].node,

  /** The URL of the page that the navigation item goes to. */
  href: _propTypes["default"].string,

  /** The notification comoponent to display on the right. */
  notification: _propTypes["default"].node,

  /** Event fired when the item is clicked. */
  onClick: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object
};
VerticalItem.defaultProps = {
  label: '',
  name: undefined,
  icon: undefined,
  href: 'javascript:void(0);',
  onClick: function onClick() {},
  notification: null,
  className: undefined,
  style: undefined
};