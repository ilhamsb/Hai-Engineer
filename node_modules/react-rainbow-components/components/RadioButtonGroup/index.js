"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _withReduxForm = _interopRequireDefault(require("./../../libs/hocs/withReduxForm"));

var _buttonItems = _interopRequireDefault(require("./buttonItems"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _RequiredAsterisk = _interopRequireDefault(require("../RequiredAsterisk"));

var _utils = require("../../libs/utils");

require("./styles.css");

var _marker = _interopRequireDefault(require("./marker"));

var _isOptionChecked = _interopRequireDefault(require("./helpers/isOptionChecked"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * A button list that can have a single entry checked at any one time.
 * @category Form
 */
var RadioButtonGroup =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(RadioButtonGroup, _Component);

  function RadioButtonGroup(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, RadioButtonGroup);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(RadioButtonGroup).call(this, props));
    _this.errorId = (0, _utils.uniqueId)('error-message');
    _this.groupNameId = props.name || (0, _utils.uniqueId)('options');
    _this.optionsRefs = _this.generateRefsForOptions();
    _this.state = {
      options: _this.addRefsToOptions(props.options),
      markerLeft: 0,
      markerWidth: 0
    };
    return _this;
  }

  (0, _createClass2["default"])(RadioButtonGroup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      setTimeout(function () {
        _this2.updateMarker();
      }, 0);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.options !== this.props.options) {
        this.updateRefs();
      }

      if (prevProps.value !== this.props.value) {
        this.updateMarker();
      }
    }
  }, {
    key: "getVariantClassNames",
    value: function getVariantClassNames() {
      var variant = this.props.variant;

      if (variant === 'default') {
        return null;
      }

      return "rainbow-radio-button-group--".concat(variant);
    }
  }, {
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var _this$props = this.props,
          className = _this$props.className,
          error = _this$props.error;
      return (0, _classnames["default"])('rainbow-radio-button-group_container', this.getVariantClassNames(), {
        'rainbow-radio-button-group--error': !!error
      }, className);
    }
  }, {
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorId;
      }

      return undefined;
    }
  }, {
    key: "getCheckedOptionRef",
    value: function getCheckedOptionRef() {
      var _this$props2 = this.props,
          value = _this$props2.value,
          options = _this$props2.options;
      var currentOptionIndex = options.findIndex(function (option) {
        return (0, _isOptionChecked["default"])(option, value);
      });
      return currentOptionIndex !== -1 ? this.optionsRefs[currentOptionIndex] : null;
    }
  }, {
    key: "generateRefsForOptions",
    value: function generateRefsForOptions() {
      var options = this.props.options;
      return options.map(function () {
        return _react["default"].createRef();
      });
    }
  }, {
    key: "addRefsToOptions",
    value: function addRefsToOptions(options) {
      var _this3 = this;

      return options.map(function (option, index) {
        return _objectSpread({}, option, {
          optionRef: _this3.optionsRefs[index]
        });
      });
    }
  }, {
    key: "isMarkerActive",
    value: function isMarkerActive() {
      var _this$props3 = this.props,
          value = _this$props3.value,
          options = _this$props3.options;
      return options.some(function (option) {
        return !option.disabled && option.value === value;
      });
    }
  }, {
    key: "updateMarker",
    value: function updateMarker() {
      var activeOptionRef = this.getCheckedOptionRef();

      if (activeOptionRef && activeOptionRef.current) {
        this.setState({
          markerLeft: activeOptionRef.current.offsetLeft,
          markerWidth: Math.max(activeOptionRef.current.offsetWidth, activeOptionRef.current.clientWidth)
        });
      }
    }
  }, {
    key: "updateRefs",
    value: function updateRefs() {
      var _this4 = this;

      this.optionsRefs = this.generateRefsForOptions();
      this.setState({
        options: this.addRefsToOptions(this.props.options)
      });
      setTimeout(function () {
        _this4.updateMarker();
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          style = _this$props4.style,
          label = _this$props4.label,
          required = _this$props4.required,
          error = _this$props4.error,
          value = _this$props4.value,
          id = _this$props4.id,
          onChange = _this$props4.onChange;
      var _this$state = this.state,
          options = _this$state.options,
          markerLeft = _this$state.markerLeft,
          markerWidth = _this$state.markerWidth;
      var markerStyle = {
        left: markerLeft,
        width: markerWidth
      };
      return _react["default"].createElement("fieldset", {
        id: id,
        className: this.getContainerClassNames(),
        style: style
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!label
      }, _react["default"].createElement("legend", {
        className: "rainbow-radio-button-group_label"
      }, _react["default"].createElement(_RequiredAsterisk["default"], {
        required: required
      }), label)), _react["default"].createElement("div", {
        className: "rainbow-radio-button-group_inner-container"
      }, _react["default"].createElement(_marker["default"], {
        isVisible: this.isMarkerActive(),
        style: markerStyle
      }), _react["default"].createElement("div", {
        className: "rainbow-radio-button-group_items-container"
      }, _react["default"].createElement(_buttonItems["default"], {
        value: value,
        onChange: onChange,
        options: options,
        name: this.groupNameId,
        required: required,
        ariaDescribedby: this.getErrorMessageId()
      }))), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement("div", {
        id: this.getErrorMessageId(),
        className: "rainbow-radio-button-group_text-error"
      }, error)));
    }
  }]);
  return RadioButtonGroup;
}(_react.Component);

RadioButtonGroup.propTypes = {
  /** The radio group label */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The name of the radio group */
  name: _propTypes["default"].string,

  /** The value of the element. */
  value: _propTypes["default"].string,

  /** The variant changes the appearance of the radio button. Accepted variants include default,
   * brand and inverse. This value defaults to default. */
  variant: _propTypes["default"].oneOf(['default', 'inverse', 'brand']),

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** If is set to true the radio group is required. This value defaults to false. */
  required: _propTypes["default"].bool,

  /** An array with the radio options. */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
    value: _propTypes["default"].string,
    disabled: _propTypes["default"].bool
  })),

  /** Specifies that an radio group must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
RadioButtonGroup.defaultProps = {
  label: null,
  name: null,
  className: undefined,
  style: undefined,
  value: undefined,
  variant: 'default',
  onChange: function onChange() {},
  required: false,
  options: [],
  error: null,
  id: undefined
};

var _default = (0, _withReduxForm["default"])(RadioButtonGroup);

exports["default"] = _default;