"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _autosize = _interopRequireDefault(require("autosize"));

var _withReduxForm = _interopRequireDefault(require("./../../libs/hocs/withReduxForm"));

var _utils = require("./../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _label = _interopRequireDefault(require("./label"));

require("./styles.css");

/**
 * Textarea inputs are used for freeform data entry.
 * @category Form
 */
var Textarea =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Textarea, _Component);

  function Textarea(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Textarea);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Textarea).call(this, props));
    _this.textareaRef = _react["default"].createRef();
    _this.textareaId = (0, _utils.uniqueId)('textarea');
    _this.inlineTextLabelId = (0, _utils.uniqueId)('inline-text-label');
    _this.errorMessageId = (0, _utils.uniqueId)('error-message');
    return _this;
  }

  (0, _createClass2["default"])(Textarea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var grow = this.props.grow;

      if (grow) {
        return (0, _autosize["default"])(this.textareaRef.current);
      }

      return null;
    }
  }, {
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var _this$props = this.props,
          className = _this$props.className,
          error = _this$props.error;
      return (0, _classnames["default"])('rainbow-textarea_container', {
        'rainbow-textarea--error': error
      }, className);
    }
  }, {
    key: "getInlineTextLabelId",
    value: function getInlineTextLabelId() {
      var bottomHelpText = this.props.bottomHelpText;

      if (bottomHelpText) {
        return this.inlineTextLabelId;
      }

      return undefined;
    }
  }, {
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.textareaRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.textareaRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.textareaRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          style = _this$props2.style,
          onChange = _this$props2.onChange,
          onClick = _this$props2.onClick,
          onFocus = _this$props2.onFocus,
          onBlur = _this$props2.onBlur,
          onPaste = _this$props2.onPaste,
          value = _this$props2.value,
          readOnly = _this$props2.readOnly,
          label = _this$props2.label,
          error = _this$props2.error,
          placeholder = _this$props2.placeholder,
          disabled = _this$props2.disabled,
          maxLength = _this$props2.maxLength,
          minLength = _this$props2.minLength,
          bottomHelpText = _this$props2.bottomHelpText,
          required = _this$props2.required,
          rows = _this$props2.rows,
          id = _this$props2.id,
          hideLabel = _this$props2.hideLabel,
          name = _this$props2.name;
      return _react["default"].createElement("div", {
        className: this.getContainerClassNames(),
        style: style,
        id: id
      }, _react["default"].createElement(_label["default"], {
        label: label,
        hideLabel: hideLabel,
        required: required,
        textareaId: this.textareaId,
        readOnly: readOnly,
        id: this.getInlineTextLabelId()
      }), _react["default"].createElement("textarea", {
        id: this.textareaId,
        className: "rainbow-textarea",
        name: name,
        placeholder: placeholder,
        disabled: disabled,
        required: required,
        maxLength: maxLength,
        minLength: minLength,
        onChange: onChange,
        onClick: onClick,
        onFocus: onFocus,
        onBlur: onBlur,
        onPaste: onPaste,
        readOnly: readOnly,
        rows: rows,
        value: value,
        "aria-labelledby": this.getInlineTextLabelId(),
        "aria-describedby": this.getErrorMessageId(),
        ref: this.textareaRef
      }), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!bottomHelpText
      }, _react["default"].createElement("div", {
        className: "rainbow-textarea_bottom-help"
      }, bottomHelpText)), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement("div", {
        id: this.getErrorMessageId(),
        className: "rainbow-textarea_text-error"
      }, error)));
    }
  }]);
  return Textarea;
}(_react.Component);

Textarea.propTypes = {
  /** Text that describes the desired textarea input. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** A boolean to hide the textarea label */
  hideLabel: _propTypes["default"].bool,

  /** The name of the textarea */
  name: _propTypes["default"].string,

  /** The value of the textarea, also used as the default value during init. */
  value: _propTypes["default"].string,

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** The maximum number of characters allowed in the textarea. */
  maxLength: _propTypes["default"].number,

  /** The minimum number of characters allowed in the textarea. */
  minLength: _propTypes["default"].number,

  /** This make to textarea grow. This value defaults to false. */
  grow: _propTypes["default"].bool,

  /** Shows the help message below the textarea. */
  bottomHelpText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the textarea field must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that the textarea field must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the textarea element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The number of visible text lines for the control. The value by default is 3. */
  rows: _propTypes["default"].number,

  /** Specifies that the textarea field is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** The action triggered when a value attribute changes. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** Event fired when the user paste on the textarea */
  onPaste: _propTypes["default"].func,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The id of the outer element. */
  id: _propTypes["default"].string
};
Textarea.defaultProps = {
  label: undefined,
  value: undefined,
  name: undefined,
  placeholder: null,
  maxLength: undefined,
  minLength: undefined,
  grow: false,
  bottomHelpText: null,
  required: false,
  error: null,
  disabled: false,
  rows: 3,
  readOnly: false,
  onChange: function onChange() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  onPaste: function onPaste() {},
  className: undefined,
  style: undefined,
  id: undefined,
  hideLabel: false
};

var _default = (0, _withReduxForm["default"])(Textarea);

exports["default"] = _default;