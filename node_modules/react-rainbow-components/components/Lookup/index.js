"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _Spinner = _interopRequireDefault(require("../Spinner"));

var _label = _interopRequireDefault(require("./label"));

var _rightElement = _interopRequireDefault(require("./rightElement"));

var _selectedValue = _interopRequireDefault(require("./selectedValue"));

var _options = _interopRequireDefault(require("./options"));

var _helpers = require("./helpers");

var _utils = require("../../libs/utils");

var _constants = require("../../libs/constants");

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

var _searchIcon = _interopRequireDefault(require("./icons/searchIcon"));

require("./styles.css");

/* eslint-disable react/no-did-update-set-state, react/no-did-mount-set-state */
var OPTION_HEIGHT = 48;
var visibleOptionsMap = {
  small: 3,
  medium: 5,
  large: 8
};
/**
 * A Lookup is an autocomplete text input that will search against a database object,
 * it is enhanced by a panel of suggested options.
 * @category Form
 */

var Lookup =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Lookup, _Component);

  function Lookup(props) {
    var _this$keyHandlerMap;

    var _this;

    (0, _classCallCheck2["default"])(this, Lookup);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Lookup).call(this, props));
    var normalizedOptions = (0, _helpers.getNormalizedOptions)(props.options || []);
    _this.state = {
      searchValue: '',
      isFocused: false,
      options: normalizedOptions,
      focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(normalizedOptions, props.preferredSelectedOption)
    };
    _this.inputId = (0, _utils.uniqueId)('lookup-input');
    _this.listboxId = (0, _utils.uniqueId)('lookup-listbox');
    _this.errorMessageId = (0, _utils.uniqueId)('error-message');
    _this.containerRef = _react["default"].createRef();
    _this.inputRef = _react["default"].createRef();
    _this.menuRef = _react["default"].createRef();
    _this.handleSearch = _this.handleSearch.bind((0, _assertThisInitialized2["default"])(_this));
    _this.clearInput = _this.clearInput.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleRemoveValue = _this.handleRemoveValue.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleHover = _this.handleHover.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyDown = _this.handleKeyDown.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyUpPressed = _this.handleKeyUpPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyDownPressed = _this.handleKeyDownPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyEnterPressed = _this.handleKeyEnterPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.keyHandlerMap = (_this$keyHandlerMap = {}, (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.UP_KEY, _this.handleKeyUpPressed), (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.DOWN_KEY, _this.handleKeyDownPressed), (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.ENTER_KEY, _this.handleKeyEnterPressed), _this$keyHandlerMap);
    return _this;
  }

  (0, _createClass2["default"])(Lookup, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var prevOptions = prevProps.options,
          prevPreferredSelectedOption = prevProps.preferredSelectedOption;
      var _this$props = this.props,
          options = _this$props.options,
          preferredSelectedOption = _this$props.preferredSelectedOption;

      if (prevOptions !== options) {
        var normalizedOptions = (0, _helpers.getNormalizedOptions)(options);
        this.setState({
          options: normalizedOptions,
          focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(normalizedOptions, preferredSelectedOption)
        });
      }

      if (prevPreferredSelectedOption !== preferredSelectedOption) {
        var currentOptions = this.state.options;
        this.setState({
          focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(currentOptions, preferredSelectedOption)
        });
      }
    }
  }, {
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          error = _this$props2.error;
      return (0, _classnames["default"])('rainbow-lookup_container', {
        'rainbow-lookup_container--error': error
      }, className);
    }
  }, {
    key: "getInputClassNames",
    value: function getInputClassNames() {
      var isLoading = this.props.isLoading;
      return (0, _classnames["default"])('rainbow-lookup_input', {
        'rainbow-lookup_input--loading': isLoading
      });
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var value = this.props.value;

      if ((0, _typeof2["default"])(value) === 'object' && !Array.isArray(value)) {
        return value;
      }

      return undefined;
    }
  }, {
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
  }, {
    key: "getAriaActivedescendant",
    value: function getAriaActivedescendant() {
      var _this$state = this.state,
          isFocused = _this$state.isFocused,
          focusedItemIndex = _this$state.focusedItemIndex;
      var options = this.props.options;
      var isOpen = (0, _helpers.isMenuOpen)(options, isFocused);

      if (isOpen) {
        return "lookup-item-".concat(focusedItemIndex);
      }

      return undefined;
    }
  }, {
    key: "handleChange",
    value: function handleChange(value) {
      var _this2 = this;

      var onChange = this.props.onChange;
      setTimeout(function () {
        return _this2.containerRef.current.focus();
      }, 0);
      this.setState({
        searchValue: ''
      });
      onChange(value);
    }
  }, {
    key: "handleSearch",
    value: function handleSearch(event) {
      var value = event.target.value;
      this.setState({
        searchValue: value
      });
      this.fireSearch(value);
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      var _this$props3 = this.props,
          onFocus = _this$props3.onFocus,
          value = _this$props3.value;
      this.openMenu();
      var eventValue = value || null;
      onFocus(eventValue);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      var _this$props4 = this.props,
          onBlur = _this$props4.onBlur,
          value = _this$props4.value;
      this.closeMenu();
      var eventValue = value || null;
      onBlur(eventValue);
    }
  }, {
    key: "handleRemoveValue",
    value: function handleRemoveValue() {
      var _this3 = this;

      var _this$props5 = this.props,
          onChange = _this$props5.onChange,
          onSearch = _this$props5.onSearch;
      onChange(null);
      onSearch('');
      setTimeout(function () {
        return _this3.focus();
      }, 0);
    }
  }, {
    key: "fireSearch",
    value: function fireSearch(value) {
      var _this$props6 = this.props,
          onSearch = _this$props6.onSearch,
          debounce = _this$props6.debounce;

      if (debounce && value) {
        this.resetTimeout();
        this.timeout = setTimeout(function () {
          onSearch(value);
        }, 500);
      } else {
        this.resetTimeout();
        onSearch(value);
      }
    }
  }, {
    key: "clearInput",
    value: function clearInput() {
      var _this4 = this;

      var searchValue = '';
      this.setState({
        searchValue: searchValue
      });
      this.fireSearch(searchValue);
      setTimeout(function () {
        return _this4.focus();
      }, 0);
    }
  }, {
    key: "resetTimeout",
    value: function resetTimeout() {
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
    }
  }, {
    key: "openMenu",
    value: function openMenu() {
      return this.setState({
        isFocused: true
      });
    }
  }, {
    key: "closeMenu",
    value: function closeMenu() {
      var options = this.state.options;
      var preferredSelectedOption = this.props.preferredSelectedOption;
      return this.setState({
        isFocused: false,
        focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(options, preferredSelectedOption)
      });
    }
  }, {
    key: "isLookupOpen",
    value: function isLookupOpen() {
      var _this$state2 = this.state,
          searchValue = _this$state2.searchValue,
          isFocused = _this$state2.isFocused;
      var options = this.props.options;
      var isMenuEmpty = isFocused && !!searchValue && Array.isArray(options) && options.length === 0;
      var isOpen = (0, _helpers.isMenuOpen)(options, isFocused);
      return isOpen || isMenuEmpty;
    }
  }, {
    key: "handleHover",
    value: function handleHover(index) {
      this.setState({
        focusedItemIndex: index
      });
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      var searchValue = this.state.searchValue;
      var keyCode = event.keyCode;

      if (keyCode === _constants.ESCAPE_KEY && !!searchValue) {
        event.stopPropagation();
      }

      if ((0, _helpers.isNavigationKey)(keyCode) && this.isLookupOpen()) {
        event.preventDefault();
        event.stopPropagation();

        if (this.keyHandlerMap[keyCode]) {
          this.keyHandlerMap[keyCode]();
        }
      }
    }
  }, {
    key: "handleKeyUpPressed",
    value: function handleKeyUpPressed() {
      var _this$state3 = this.state,
          focusedItemIndex = _this$state3.focusedItemIndex,
          options = _this$state3.options;

      if (focusedItemIndex > 0) {
        var prevIndex = focusedItemIndex - 1;
        var prevFocusedIndex = options[prevIndex].type === 'header' ? focusedItemIndex - 2 : prevIndex;

        if (prevFocusedIndex >= 0) {
          this.setState({
            focusedItemIndex: prevFocusedIndex
          });
        }

        this.scrollUp(prevFocusedIndex);
      }
    }
  }, {
    key: "scrollUp",
    value: function scrollUp(prevFocusedIndex) {
      var options = this.state.options;
      var size = this.props.size;
      var menu = this.menuRef.current.getRef();
      var prevIndex = prevFocusedIndex >= 0 ? prevFocusedIndex : 0;
      var prevFocusedOption = menu.childNodes[prevIndex];
      var visibleOptionsAmount = visibleOptionsMap[size] || visibleOptionsMap.medium;

      if (options.length > visibleOptionsAmount && !(0, _helpers.isOptionVisible)(prevFocusedOption, menu)) {
        this.menuRef.current.scrollTo(OPTION_HEIGHT * prevIndex);
      }
    }
  }, {
    key: "handleKeyDownPressed",
    value: function handleKeyDownPressed() {
      var _this$state4 = this.state,
          focusedItemIndex = _this$state4.focusedItemIndex,
          options = _this$state4.options;
      var lastIndex = options.length - 1;

      if (focusedItemIndex < lastIndex) {
        var nextIndex = focusedItemIndex + 1;
        var nextFocusedIndex = options[nextIndex].type === 'header' ? focusedItemIndex + 2 : nextIndex;

        if (nextFocusedIndex <= lastIndex) {
          this.setState({
            focusedItemIndex: nextFocusedIndex
          });
          this.scrollDown(nextFocusedIndex);
        }
      }
    }
  }, {
    key: "scrollDown",
    value: function scrollDown(nextFocusedIndex) {
      var options = this.state.options;
      var size = this.props.size;
      var menu = this.menuRef.current.getRef();
      var nextFocusedOption = menu.childNodes[nextFocusedIndex];
      var visibleOptionsAmount = visibleOptionsMap[size] || visibleOptionsMap.medium;

      if (options.length > visibleOptionsAmount && !(0, _helpers.isOptionVisible)(nextFocusedOption, menu)) {
        this.menuRef.current.scrollTo(OPTION_HEIGHT * (nextFocusedIndex - (visibleOptionsAmount - 1)));
      }
    }
  }, {
    key: "handleKeyEnterPressed",
    value: function handleKeyEnterPressed() {
      var onChange = this.props.onChange;
      var focusedItemIndex = this.state.focusedItemIndex;
      var options = this.state.options;
      var value = options[focusedItemIndex];
      this.containerRef.current.focus();
      this.setState({
        searchValue: ''
      });
      onChange(value);
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.inputRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.inputRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.inputRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          style = _this$props7.style,
          label = _this$props7.label,
          error = _this$props7.error,
          size = _this$props7.size,
          placeholder = _this$props7.placeholder,
          disabled = _this$props7.disabled,
          readOnly = _this$props7.readOnly,
          tabIndex = _this$props7.tabIndex,
          onClick = _this$props7.onClick,
          required = _this$props7.required,
          id = _this$props7.id,
          name = _this$props7.name,
          hideLabel = _this$props7.hideLabel,
          isLoading = _this$props7.isLoading,
          icon = _this$props7.icon;
      var _this$state5 = this.state,
          searchValue = _this$state5.searchValue,
          focusedItemIndex = _this$state5.focusedItemIndex,
          options = _this$state5.options;
      var onDeleteValue = disabled || readOnly ? undefined : this.handleRemoveValue;
      var isLookupOpen = this.isLookupOpen();
      var errorMessageId = this.getErrorMessageId();
      var currentValue = this.getValue();
      return _react["default"].createElement("div", {
        id: id,
        className: this.getContainerClassNames(),
        style: style,
        role: "presentation",
        onKeyDown: this.handleKeyDown,
        ref: this.containerRef,
        tabIndex: -1
      }, _react["default"].createElement(_label["default"], {
        label: label,
        hideLabel: hideLabel,
        required: required,
        inputId: this.inputId,
        readOnly: readOnly
      }), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!currentValue
      }, _react["default"].createElement(_selectedValue["default"], {
        id: this.inputId,
        name: name,
        value: currentValue,
        tabIndex: tabIndex,
        onClick: onClick,
        disabled: disabled,
        required: required,
        readOnly: readOnly,
        errorMessageId: errorMessageId,
        ref: this.inputRef,
        onClearValue: onDeleteValue
      })), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !currentValue
      }, _react["default"].createElement("div", {
        className: "rainbow-lookup_input-container",
        "aria-expanded": isLookupOpen,
        "aria-haspopup": "listbox" // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        ,
        role: "combobox"
      }, _react["default"].createElement(_Spinner["default"], {
        isVisible: isLoading,
        className: "rainbow-lookup_spinner",
        size: "x-small",
        assistiveText: "searching"
      }), _react["default"].createElement(_rightElement["default"], {
        showCloseButton: !!searchValue,
        onClear: this.clearInput,
        icon: icon
      }), _react["default"].createElement("input", {
        id: this.inputId,
        name: name,
        type: "search",
        className: this.getInputClassNames(),
        value: searchValue,
        placeholder: placeholder,
        onChange: this.handleSearch,
        tabIndex: tabIndex,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onClick: onClick,
        disabled: disabled,
        readOnly: readOnly,
        required: required,
        autoComplete: "off",
        "aria-describedby": errorMessageId,
        "aria-autocomplete": "list",
        "aria-controls": this.listboxId,
        "aria-activedescendant": this.getAriaActivedescendant(),
        ref: this.inputRef
      }), _react["default"].createElement(_RenderIf["default"], {
        isTrue: isLookupOpen
      }, _react["default"].createElement("div", {
        className: "rainbow-lookup_options-menu",
        id: this.listboxId,
        role: "listbox"
      }, _react["default"].createElement(_options["default"], {
        items: options,
        value: searchValue,
        onSelectOption: this.handleChange,
        focusedItemIndex: focusedItemIndex,
        onHoverOption: this.handleHover,
        itemHeight: OPTION_HEIGHT,
        ref: this.menuRef,
        size: size
      }))))), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement("div", {
        id: errorMessageId,
        className: "rainbow-lookup_input-error"
      }, error)));
    }
  }]);
  return Lookup;
}(_react.Component);

Lookup.propTypes = {
  /** Text label for the Lookup. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** A boolean to hide the Lookup label. */
  hideLabel: _propTypes["default"].bool,

  /** Specifies the selected value of the Lookup. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    label: _propTypes["default"].string,
    description: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string]),
    icon: _propTypes["default"].node
  }), _propTypes["default"].string]),

  /** An array of matched options to show in a menu. */
  options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    label: _propTypes["default"].string,
    description: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string]),
    icon: _propTypes["default"].node
  })),

  /** The name of the Lookup. */
  name: _propTypes["default"].string,

  /** If set to true the onSearch event is sent when the customer finish typing. */
  debounce: _propTypes["default"].bool,

  /** If is set to true, then is showed a loading symbol. */
  isLoading: _propTypes["default"].bool,

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** Specifies that the Lookup must be filled out before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that the Lookup must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that the Lookup element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that the Lookup is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** The icon that appears in the Lookup when the input search is empty.
   * If not passed by default a search icon will be showed. */
  icon: _propTypes["default"].node,

  /** The size of the Lookup menu. Options include small, medium, or large.
   * This value defaults to medium. */
  size: _propTypes["default"].oneOf(['small', 'medium', 'large']),

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** The action triggered for every key stroke when the customer is typing in the input.
   * It sent the value/query of the input. This value is normally used for filter/search
   * for more options. */
  onSearch: _propTypes["default"].func,

  /**  The action triggered when click/select an option. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object,

  /** The index of the option that is visual-focus initially */
  preferredSelectedOption: _propTypes["default"].number
};
Lookup.defaultProps = {
  label: undefined,
  value: undefined,
  name: undefined,
  placeholder: null,
  required: false,
  error: null,
  disabled: false,
  readOnly: false,
  icon: _react["default"].createElement(_searchIcon["default"], null),
  size: 'medium',
  onChange: function onChange() {},
  tabIndex: undefined,
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  className: undefined,
  style: undefined,
  id: undefined,
  hideLabel: false,
  isLoading: false,
  options: undefined,
  onSearch: function onSearch() {},
  debounce: false,
  preferredSelectedOption: 0
};

var _default = (0, _withReduxForm["default"])(Lookup);

exports["default"] = _default;