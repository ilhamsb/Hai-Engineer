"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _clipboardCopy = _interopRequireDefault(require("clipboard-copy"));

var _formatValue4 = _interopRequireDefault(require("./helpers/formatValue"));

var _index = _interopRequireDefault(require("../RenderIf/index"));

var _closeIcon = _interopRequireDefault(require("../Chip/closeIcon"));

var _index2 = _interopRequireDefault(require("../ButtonIcon/index"));

var SelectedValue =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SelectedValue, _Component);

  function SelectedValue(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SelectedValue);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SelectedValue).call(this, props));
    _this.inputRef = _react["default"].createRef();
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(SelectedValue, [{
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var readOnly = this.props.readOnly;
      return (0, _classnames["default"])('rainbow-lookup_selected-value', {
        'rainbow-lookup_selected-value--readonly': readOnly
      });
    }
  }, {
    key: "getInputClassNames",
    value: function getInputClassNames() {
      var value = this.props.value;

      var _formatValue = (0, _formatValue4["default"])(value),
          icon = _formatValue.icon;

      return (0, _classnames["default"])('rainbow-lookup_selected-value-input', {
        'rainbow-lookup_selected-value-input-with-icon': !!icon
      });
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      var value = this.props.value;

      var _formatValue2 = (0, _formatValue4["default"])(value),
          label = _formatValue2.label;

      (0, _clipboardCopy["default"])(label);
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.inputRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.inputRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.inputRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          name = _this$props.name,
          value = _this$props.value,
          disabled = _this$props.disabled,
          tabIndex = _this$props.tabIndex,
          readOnly = _this$props.readOnly,
          required = _this$props.required,
          onClick = _this$props.onClick,
          onClearValue = _this$props.onClearValue,
          errorMessageId = _this$props.errorMessageId;

      var _formatValue3 = (0, _formatValue4["default"])(value),
          label = _formatValue3.label,
          icon = _formatValue3.icon;

      return _react["default"].createElement("div", {
        className: this.getContainerClassNames()
      }, _react["default"].createElement(_index["default"], {
        isTrue: !!icon
      }, _react["default"].createElement("span", {
        className: "rainbow-lookup_selected-value-icon"
      }, icon)), _react["default"].createElement("input", {
        id: id,
        name: name,
        type: "text",
        className: this.getInputClassNames(),
        value: label,
        tabIndex: tabIndex,
        onFocus: this.handleFocus,
        onClick: onClick,
        disabled: disabled,
        readOnly: true,
        "aria-describedby": errorMessageId,
        required: required,
        ref: this.inputRef
      }), _react["default"].createElement(_index["default"], {
        isTrue: !(readOnly || disabled)
      }, _react["default"].createElement("span", {
        className: "rainbow-lookup_selected-value-clear-button-container"
      }, _react["default"].createElement(_index2["default"], {
        assistiveText: "clear",
        size: "small",
        title: "Remove selected option",
        icon: _react["default"].createElement(_closeIcon["default"], {
          color: "#576574"
        }),
        onClick: onClearValue
      }))));
    }
  }]);
  return SelectedValue;
}(_react.Component);

exports["default"] = SelectedValue;
SelectedValue.propTypes = {
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    label: _propTypes["default"].string,
    description: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string]),
    icon: _propTypes["default"].node
  }), _propTypes["default"].string]),
  id: _propTypes["default"].string,
  name: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  required: _propTypes["default"].bool,
  readOnly: _propTypes["default"].bool,
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  onClick: _propTypes["default"].func,
  onClearValue: _propTypes["default"].func,
  errorMessageId: _propTypes["default"].string
};
SelectedValue.defaultProps = {
  value: undefined,
  name: undefined,
  id: undefined,
  disabled: false,
  required: false,
  readOnly: false,
  tabIndex: undefined,
  onClick: function onClick() {},
  onClearValue: undefined,
  errorMessageId: undefined
};