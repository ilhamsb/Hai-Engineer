"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ampmSelect = _interopRequireDefault(require("./../ampmSelect"));

describe('<AmPmSelect/>', function () {
  it('should render the right markup initially when component is not focused', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], {
      tabIndex: "-1"
    }));
    expect(component.find('input[className="rainbow-time-picker_time-select-value"]').exists()).toBe(true);
  });
  it('should render the right markup when component is focused', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], null));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    expect(component.find('fieldset[className="rainbow-time-picker_time-select-value rainbow-time-picker_select-ampm"]').exists()).toBe(true);
    expect(component.find('input[value="AM"]').exists()).toBe(true);
    expect(component.find('input[value="PM"]').exists()).toBe(true);
  });
  it('should fire the onChange event with "AM" when the component get focus and value and defaultValue are undefined', function () {
    var onChangeMckFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], {
      onChange: onChangeMckFn
    }));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    expect(component.prop('onChange')).toHaveBeenCalledWith('AM');
  });
  it('should fire the onChange event with the defaultValue passed when the component get focus and the prop value is undefined', function () {
    var onChangeMckFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], {
      defaultValue: "PM",
      onChange: onChangeMckFn
    }));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    expect(component.prop('onChange')).toHaveBeenCalledWith('PM');
  });
  it('should render the initial input when component lost focus', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], null));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    component.find('fieldset[className="rainbow-time-picker_time-select-value rainbow-time-picker_select-ampm"]').simulate('blur');
    expect(component.find('input[className="rainbow-time-picker_time-select-value"]').exists()).toBe(true);
  });
  it('should focus the component when the focus method is called and the component is focused', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], {
      tabIndex: "-1"
    }));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    component.instance().fieldsetRef.current.focus();
    var focusedElementDataId = document.activeElement.getAttribute('data-id');
    var fieldsetDataId = component.find('fieldset').prop('data-id');
    expect(focusedElementDataId).toBe(fieldsetDataId);
  });
  it('should focus the component when the focus method is called and the component is not focused', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], {
      tabIndex: "-1"
    }));
    component.instance().fieldsetRef.current.focus();
    var focusedElementDataId = document.activeElement.getAttribute('data-id');
    var fieldsetDataId = component.find('input').prop('data-id');
    expect(focusedElementDataId).toBe(fieldsetDataId);
  });
  it('should call event.stopPropagation when component is focused and the input with value "AM" is blurred', function () {
    var stopPropagationMockFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], null));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    component.find('input[value="AM"]').simulate('blur', {
      stopPropagation: stopPropagationMockFn
    });
    expect(stopPropagationMockFn).toHaveBeenCalledTimes(1);
  });
  it('should call event.stopPropagation when component is focused and the input with value "PM" is blurred', function () {
    var stopPropagationMockFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_ampmSelect["default"], null));
    component.find('input[className="rainbow-time-picker_time-select-value"]').simulate('focus');
    component.find('input[value="PM"]').simulate('blur', {
      stopPropagation: stopPropagationMockFn
    });
    expect(stopPropagationMockFn).toHaveBeenCalledTimes(1);
  });
});