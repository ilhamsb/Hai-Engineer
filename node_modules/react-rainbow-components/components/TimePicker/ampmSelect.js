"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./../../libs/utils");

var _isChecked = _interopRequireDefault(require("./helpers/isChecked"));

function handleAmPmBlur(event) {
  event.stopPropagation();
}

var AmPmSelect =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(AmPmSelect, _PureComponent);

  function AmPmSelect(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, AmPmSelect);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(AmPmSelect).call(this, props));
    _this.state = {
      isFocused: false
    };
    _this.fieldsetRef = _react["default"].createRef();
    _this.inputAmId = (0, _utils.uniqueId)('am');
    _this.inputPmId = (0, _utils.uniqueId)('pm');
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleOnChange = _this.handleOnChange.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(AmPmSelect, [{
    key: "handleFocus",
    value: function handleFocus() {
      var _this2 = this;

      var _this$props = this.props,
          onChange = _this$props.onChange,
          defaultValue = _this$props.defaultValue,
          value = _this$props.value;
      this.setState({
        isFocused: true
      });
      setTimeout(function () {
        return _this2.fieldsetRef.current.focus();
      }, 0);

      if (!value) {
        onChange(defaultValue || 'AM');
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      this.setState({
        isFocused: false
      });
    }
  }, {
    key: "handleOnChange",
    value: function handleOnChange(event) {
      var onChange = this.props.onChange;
      var value = event.target.value;
      onChange(value);
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      this.setState({
        isFocused: false
      });
    }
  }, {
    key: "isInputChecked",
    value: function isInputChecked(inputValue) {
      var _this$props2 = this.props,
          value = _this$props2.value,
          defaultValue = _this$props2.defaultValue;
      return (0, _isChecked["default"])({
        inputValue: inputValue,
        value: value,
        defaultValue: defaultValue
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      this.fieldsetRef.current.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var isFocused = this.state.isFocused;
      var _this$props3 = this.props,
          tabIndex = _this$props3.tabIndex,
          onFocus = _this$props3.onFocus,
          value = _this$props3.value;

      if (isFocused) {
        return _react["default"].createElement("fieldset", {
          "data-id": "fieldset-element",
          className: "rainbow-time-picker_time-select-value rainbow-time-picker_select-ampm",
          role: "presentation",
          tabIndex: tabIndex,
          onBlur: this.handleBlur,
          onFocus: onFocus,
          ref: this.fieldsetRef
        }, _react["default"].createElement("input", {
          className: "rainbow-time-picker_time-input--hidden",
          type: "radio",
          id: this.inputAmId,
          name: "ampmOptions",
          value: "AM",
          checked: this.isInputChecked('AM'),
          onChange: this.handleOnChange,
          onClick: this.handleClick,
          onBlur: handleAmPmBlur
        }), _react["default"].createElement("label", {
          className: "rainbow-time-picker_select-option",
          htmlFor: this.inputAmId
        }, "am"), _react["default"].createElement("input", {
          className: "rainbow-time-picker_time-input--hidden",
          type: "radio",
          id: this.inputPmId,
          name: "ampmOptions",
          value: "PM",
          checked: this.isInputChecked('PM'),
          onChange: this.handleOnChange,
          onClick: this.handleClick,
          onBlur: handleAmPmBlur
        }), _react["default"].createElement("label", {
          className: "rainbow-time-picker_select-option",
          htmlFor: this.inputPmId
        }, "pm"));
      }

      return _react["default"].createElement("input", {
        "aria-label": "am-pm selector",
        "data-id": "input-element",
        className: "rainbow-time-picker_time-select-value",
        tabIndex: tabIndex,
        onFocus: this.handleFocus,
        placeholder: "--",
        defaultValue: value,
        ref: this.fieldsetRef
      });
    }
  }]);
  return AmPmSelect;
}(_react.PureComponent);

exports["default"] = AmPmSelect;
AmPmSelect.propTypes = {
  value: _propTypes["default"].string,
  defaultValue: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  tabIndex: _propTypes["default"].string
};
AmPmSelect.defaultProps = {
  value: undefined,
  defaultValue: undefined,
  onChange: function onChange() {},
  onFocus: function onFocus() {},
  tabIndex: undefined
};