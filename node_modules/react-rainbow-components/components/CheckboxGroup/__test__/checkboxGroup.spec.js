"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _index = _interopRequireDefault(require("../index"));

var options = [{
  value: 'admin',
  label: 'Admin',
  disabled: false
}, {
  value: 'user',
  label: 'User',
  disabled: false
}, {
  value: 'nobody',
  label: 'Anonymus',
  disabled: true
}];
describe('<CheckboxGroup />', function () {
  it('should set the right classNames when error is passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      options: options,
      error: true
    }));
    expect(component.find('fieldset.rainbow-checkbox-group_container.rainbow-checkbox-group--error').exists()).toBe(true);
  });
  it('should set the right classNames when custom classes are passed', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      options: options,
      className: "custom-class-name"
    }));
    expect(component.find('fieldset.rainbow-checkbox-group_container.custom-class-name').exists()).toBe(true);
  });
  it('should set an empty array when the values passed is a "string"', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      value: "admin",
      className: "custom-class-name"
    }));
    var checkbox = component.find('CheckboxList');
    expect(checkbox.prop('values')).toEqual([]);
  });
  it('should set the right values when the values passed is not a "string"', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_index["default"], {
      value: ['admin', 'user-1'],
      className: "custom-class-name"
    }));
    var checkbox = component.find('CheckboxList');
    expect(checkbox.prop('values')).toEqual(['admin', 'user-1']);
  });
});