"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("./../../libs/utils");

var _AssistiveText = _interopRequireDefault(require("./../AssistiveText"));

var _context = require("./context");

var _getMaxHeight = _interopRequireDefault(require("./getMaxHeight"));

var _description = _interopRequireDefault(require("./description"));

var _rightArrow = _interopRequireDefault(require("./rightArrow"));

require("./styles.css");

/**
 * Represents an overflow of items from a preceding VerticalNavigationSection,
 * with the ability to toggle visibility.
 * @category Layout
 */
var VerticalSectionOverflow =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(VerticalSectionOverflow, _Component);

  function VerticalSectionOverflow(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, VerticalSectionOverflow);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(VerticalSectionOverflow).call(this, props));
    _this.searchResultsId = (0, _utils.uniqueId)('search-results');
    _this.state = {
      isExpanded: props.expanded
    };
    _this.toggleOverflow = _this.toggleOverflow.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(VerticalSectionOverflow, [{
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var className = this.props.className;
      var isExpanded = this.state.isExpanded;
      return (0, _classnames["default"])('rainbow-vertical-section-overflow_container', {
        'rainbow-vertical-section-overflow_container--expanded': isExpanded
      }, className);
    }
  }, {
    key: "getButtonClassNames",
    value: function getButtonClassNames() {
      var isExpanded = this.state.isExpanded;
      var description = this.props.description;
      return (0, _classnames["default"])('rainbow-vertical-section-overflow_button', {
        'rainbow-vertical-section-overflow_button--expanded': isExpanded && description
      });
    }
  }, {
    key: "getOverflowClassName",
    value: function getOverflowClassName() {
      var isExpanded = this.state.isExpanded;

      if (isExpanded) {
        return 'rainbow-vertical-section-overflow--show';
      }

      return 'rainbow-vertical-section-overflow--hide';
    }
  }, {
    key: "toggleOverflow",
    value: function toggleOverflow(event) {
      var isExpanded = this.state.isExpanded;
      var onToggleSection = this.props.onToggleSection;

      if (typeof onToggleSection === 'function') {
        return onToggleSection(event);
      }

      return this.setState({
        isExpanded: !isExpanded
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          description = _this$props.description,
          style = _this$props.style,
          assistiveText = _this$props.assistiveText,
          children = _this$props.children;
      var isExpanded = this.state.isExpanded;
      var sectionMaxHeight = {
        maxHeight: (0, _getMaxHeight["default"])(children, isExpanded)
      };
      return _react["default"].createElement("div", {
        "data-id": "vertical-overflow-container",
        className: this.getContainerClassNames(),
        style: style
      }, _react["default"].createElement("button", {
        className: this.getButtonClassNames(),
        "aria-controls": this.searchResultsId,
        "aria-expanded": isExpanded,
        onClick: this.toggleOverflow
      }, _react["default"].createElement("div", {
        className: "rainbow-vertical-section-overflow_action-text"
      }, _react["default"].createElement("span", {
        className: "rainbow-vertical-section-overflow_action-label"
      }, label), _react["default"].createElement(_description["default"], {
        isExpanded: isExpanded,
        description: description
      }), _react["default"].createElement(_AssistiveText["default"], {
        text: assistiveText
      })), _react["default"].createElement(_rightArrow["default"], {
        isExpanded: isExpanded
      })), _react["default"].createElement("div", {
        "data-id": "vertical-overflow",
        id: this.searchResultsId,
        className: this.getOverflowClassName(),
        style: sectionMaxHeight
      }, _react["default"].createElement(_context.Provider, {
        value: isExpanded
      }, _react["default"].createElement("ul", null, children))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      var expanded = nextProps.expanded,
          onToggleSection = nextProps.onToggleSection;

      if (expanded !== state.isExpanded && typeof onToggleSection === 'function') {
        return {
          isExpanded: expanded
        };
      }

      return null;
    }
  }]);
  return VerticalSectionOverflow;
}(_react.Component);

exports["default"] = VerticalSectionOverflow;
VerticalSectionOverflow.propTypes = {
  /** The label to show when the section is collapsed. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The description to show when the section is collapsed. */
  description: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** The state of the overflow. */
  expanded: _propTypes["default"].bool,

  /** A description for assistive sreen readers. */
  assistiveText: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied for the outer element. */
  style: _propTypes["default"].object,

  /** Action fired when a component is clicked. */
  onToggleSection: _propTypes["default"].func,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].node
};
VerticalSectionOverflow.defaultProps = {
  label: '',
  description: '',
  expanded: false,
  className: undefined,
  style: undefined,
  assistiveText: undefined,
  children: null,
  onToggleSection: undefined
};