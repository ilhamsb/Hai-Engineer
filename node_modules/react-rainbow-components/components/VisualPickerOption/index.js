"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = VisualPickerOption;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _context = require("../VisualPicker/context");

var _utils = require("../../libs/utils");

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _checkmark = _interopRequireDefault(require("./checkmark"));

require("./styles.css");

/* eslint-disable react/prop-types */
var PickerOption =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(PickerOption, _Component);

  function PickerOption(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, PickerOption);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(PickerOption).call(this, props));
    _this.inputId = (0, _utils.uniqueId)('radio');
    _this.handleChange = _this.handleChange.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(PickerOption, [{
    key: "getContainerClassNames",
    value: function getContainerClassNames() {
      var className = this.props.className;
      return (0, _classnames["default"])('rainbow-visual-picker-option_content-container', className);
    }
  }, {
    key: "getType",
    value: function getType() {
      var multiple = this.props.multiple;

      if (multiple) {
        return 'checkbox';
      }

      return 'radio';
    }
  }, {
    key: "isChecked",
    value: function isChecked() {
      var _this$props = this.props,
          multiple = _this$props.multiple,
          name = _this$props.name,
          value = _this$props.value;

      if (multiple) {
        return Array.isArray(value) && value.includes(name);
      }

      return typeof value === 'string' && name === value;
    }
  }, {
    key: "handleChange",
    value: function handleChange(event) {
      var _this$props2 = this.props,
          name = _this$props2.name,
          privateOnChange = _this$props2.privateOnChange;
      privateOnChange(name, event.target.checked);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          children = _this$props3.children,
          footer = _this$props3.footer,
          style = _this$props3.style;
      var _this$props4 = this.props,
          groupName = _this$props4.groupName,
          ariaDescribedby = _this$props4.ariaDescribedby;
      return _react["default"].createElement("span", {
        className: this.getContainerClassNames(),
        style: style
      }, _react["default"].createElement("input", {
        className: "rainbow-visual-picker-option_input",
        type: this.getType(),
        id: this.inputId,
        name: groupName,
        checked: this.isChecked(),
        "aria-describedby": ariaDescribedby,
        onChange: this.handleChange,
        disabled: disabled
      }), _react["default"].createElement("label", {
        className: "rainbow-visual-picker-option_content",
        htmlFor: this.inputId
      }, _react["default"].createElement("span", {
        className: "rainbow-visual-picker-option"
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: this.isChecked()
      }, _react["default"].createElement("span", {
        className: "rainbow-visual-picker-option_selected-element"
      }), _react["default"].createElement(_checkmark["default"], {
        className: "rainbow-visual-picker-option_checkmark-icon"
      })), children), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!footer
      }, _react["default"].createElement("span", {
        className: "rainbow-visual-picker-option_footer"
      }, footer))));
    }
  }]);
  return PickerOption;
}(_react.Component);
/**
 * A VisualPickerOption.
 * @category Form
 */


function VisualPickerOption(props) {
  return _react["default"].createElement(_context.Consumer, null, function (context) {
    return _react["default"].createElement(PickerOption, (0, _extends2["default"])({}, props, context));
  });
}

VisualPickerOption.propTypes = {
  /** It is a unique value that identifies the picker option. */
  name: _propTypes["default"].string,

  /** It is what will be displayed at the bottom of the component. */
  footer: _propTypes["default"].node,

  /** Specifies that an VisualPickerOption element should be disabled.
   * This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** The class name of the root element. */
  className: _propTypes["default"].string,

  /** It is an object with custom style applied to the root element. */
  style: _propTypes["default"].object,

  /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object])
};
VisualPickerOption.defaultProps = {
  name: undefined,
  footer: undefined,
  disabled: false,
  className: undefined,
  style: undefined,
  children: [],
  ariaDescribedby: undefined
};